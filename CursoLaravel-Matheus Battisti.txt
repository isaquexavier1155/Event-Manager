
			Laravel

	Framework construido em linguagem PHP
	Utiliza arquiteturs MVC (Model, Viw e Controller)
	Utiliza classe, metodos e propriedades
	Controller: Onde fica logica de negocios, validações
	Model: onde ocorre gerenciamaneto de banco de dados
	View: Parte visula do sistema
	Artisan:Terminal de gerenciamento do banco de dados atraves de comandos
	Migrations: Como se fosse versionamento de banco de dados
	Blade: Ajuda manusear a view do sistema 
	Facil de criar codigo
	Estrutura de pastas organizadas
	
	Intalação: tem que ter php superior a 7.3 -ok tenho o 8.2.5
	Composer - ok
	VS Code - ok
	Xamp - ok

	
	Rodar comando no terminal do Vs Code para instalar o Laravel: 
	composer create-project --prefer-dist laravel/laravel hdcevents
	hdcevents é o nome do projeto
	Ir na pasta raiz do projeto e executar com comando: cd hdcevents 
	Depois executar o Laravel com o seguinte comando: php artisan serve para iniciar servidor web
	Depois entrar no navegador pelo endereço: http://127.0.0.1:8000


	ROTAS E VIWES

	Vamos acessar as paginas do projeto pelas rotas: URL
	Viwes: são as representações gráficas das páginas
	Nas viewu teremos os templates onde ha a estruturação da página por meio de HTML
	Templates podem rederizar dados dinamicos por meio do PHP
	Blade e templates são sinonimos
	
	Arquivo web.php tem todas as rotas disponíveis do Laravel

	BLADE: Template Engine do Laravel
	HTML puro pelo Blade e com Engine(Motor) busca dados do banco e das controllers
	Deixa as views dinamicas
	Views são responsabilidades do Blade
	Condicionais, for, forecah

	DIRETIVAS
	Diretivas do template Engine no HTML 
	Exemplo mostra resulado na tela conforme codicional
	@if(10 > 5)
                		<p>A condição é true</p>
        	@endif

*******************************Exemplo de diretiva com dados dinâmicos:

	   <p> {{ $nome }} </p>  
     	@if($nome == "Isaque")
        		<p>O nome é Isaque</p>
     	@else
        		<p>O nome não é Isaque</p>
     	@endif

*************************************

	Todos os dados dinâmicos estão entre duas chaves no meio do HTML, por exemplo num <p></p>

	AVANÇANDO NO BLADE - O que podemos fazer com Blade?
	Criar estrutura de repetição for e for each
	Poder escrever PHP puro
	Escrever comentários nos arquivos de view
	Limitar acesso de usuários
	Autenticação

	ADICIONANDO ARQUIVOS ESTÁTICOS
	
	Os arquivos estáticos, css e js devem ser adicionados dentro da pasta public do projeto Laravel
	Laravel proporciona uma maneira muito fácil de inserir estes arquivos estáticos
	Todos estes recursos estao na pasta public

	Layouts com Blade
	Para reaproveitar codigos
	Usar mesmo header e footer em todas as páginas sem repetir codigos
	Podemos criar seções do site que muda conforme usuário estiver logado ou deslogado e title da página
	
	Prática

	Comentar , comentario, comentário bloco:  VS CODE PHP:  CONTROL+K E DEPOIS CONTROL+C
	<!-- mudar conteudo dinamicamente -->
       	 @yield('content')

	Para utilizar layouts do Blade deve-se colocar a notação @yield onde será obtido conteudo (main.blade.php)
	E nas views coloca-se as @sections referentes a cada @yield para receber o conteudo obtido (products.blade.php) 

	Parâmetros nas rotas

	Podemos mudar como uma view nos responde adicionando parâmetros
	Ao definir a rota devemos colocar o parâmetros desta meneira: {id}
	Podemos ter parÂmetros aopcionais tambem, adicionando uma ?;
	Podemos usar query parameters, utilizando a seguinte sintaxe: ?nome=Marheus&idade=29

	Teste no navegador: http://127.0.0.1:8000/produtos

	Criando Controllers
	
	Tem papel de enviar e esperar resposta do banco de dados e para views
	Podem ser criados via artisan via comando no terminal
	Redirecionamento para URL 
	Cada controle tem uma action de ums rota

	Comando para criar controller via linha de comando: php artisan make:controller EventController
	Nome da classe de controle: EventController
	PS C:\Users\isaqu\OneDrive\Documentos\Curso-PHP\Curso Laravel\hdcevents> php artisan make:controller EventController

	    Tarefa:: Criar controllers para contatos e produtos


	CONEXÃO DO LARAVEL COM BANCO DE DADOS
	

	Segurança foi aprimorada no Laravel
	Toda a configuração do Laravel fica em arquivo .env
	Laravel tambem utiliza um ORM(Object-Relational Mapping) chamada Eloquent
	e Migrations para gerenciamento de tabelas e versionamento do banco de dados, roolback

	Conexão de Laravel com banco de dados

	1 - Abrir Xampp (servidor de banco de dados)
	2 - Ligar MySQL e Apache no Xampp
	3 - Acessar PHP MY ADMIN: http://localhost/phpmyadmin/
	4 - Crie banco de dados chamado hdceventscurso 
	5 - executar comando no terminal VScode, dentro da pasta raiz do projeto, para criar tabelas padrões do Laravel: 
	6 - Adição de extensão PDO MYsql
	7 - Comando: php artisan migrate
	Criação da tabela relaizada com sucesso.

	MIGRATIONS

	Funcionam como um versionamento de banco de dados
	Podemos avnçar e retroceder a qualquer momento
	Adicionar colunas e remover de forma facilitada
	Fazer setup de BD de uma nova instalação em apenas um comando
	Podemos verificar as migations com migrate:status

	Comado para criar migration: php artisan make:migration create_products_table
	Ver status da migation: php artisan migrate:status
	Quando status estiver pending deve-se significa que ela não foi rodada ainda
	Então executamos: php artisan migrate

	Ao adicionar um campo manualmente no arquivo da pasta migrations,  com o comando: $table->string('name');
	ATENÇÃO: Ao executar comando FRESSH irá perder todos os dados salvos nas tabelas
	Devemos executar: php artisan migrate: fresh para deletar e refazer todas as tabelas novamente
	Teste commmit

	Ajustar tamanho dos campos
	$table->string('name', 100);
            	$table->integer('qtd');
            	$table->text('description');


	AVANÇANDO EM MIGRATIONS
	
	Ao adicionar novo campo em tabela deve-se criar uma nova migration
	rollback: volta uma migration
	reset: voltar todas as migrations
	refresh: voltar todas as migrations e rodar migrate novamente

	ADICIONAR NOVA COLUNA OU CAMPO EM TABELA EXSITENTE
	Para gerar nova campo sem intervir em outras tabelas os campos criados, executar o seguinte comando:
	php artisan make:migration +NOMEDACOLNA exem-> php artisan make:migration add_category_to_products_table
	depois ediatar migration gerada e adicionar campos manualmente nos metodos e 
	down
	$table->dropColumn('category');
	e metodo up 
	$table->string('category', 100);
	para funcionar o rollback o metodo down deve estar no seguinte formato: $table->dropColumn('category');
	
	para voltar campo imediatamnete após ser criado: 
	php artisan migrate:rollback


	ELOQUENT
	OBTENDO DADOS DA TABELA ATRVÉS DE MODEL, VIEW ECONTROLLER (MVC)

	Eloquente é a ORM (abstração as querys por exemplo select from...) do Laravel
	Cada tabela tem um model que é responsavel pela interação entre as requisições ao banco
	A convençao para o Model é o nome da entidade em singular
	No model faremos poucas alterações dos arquivos geralmente configurações específicas	

	echo('<pre>');
	echo('Param: ').PHP_EOL;
                 var_dump($param).PHP_EOL;
	echo('</pre>');

	Estava dando erro de extensoes novamente ai tive que conferir os arquivos php.ini e reiniciar o sitema para corriigir o problema
	
	FINALIZANDO A HOME HTM E CSS

	Adicionando registro ao banco

	No laravel é comun ter uma action específica para o post chamada de STORE
	Lá vamos criar o objeto e compor ele com base nos dados enviados pelo POST
	Com o objeto formado utlizamos o método SAVE para persistir os dados
	
	Criar designer do fomrulário, exemplo no arquivo create.blade.php: 
@section('content')

<div id="event-create-container" class="col-md-6 offset-md-3">
    <h1>Crie o seu evento</h1>
    <form action="/events" method="POST">
        <div class="form-group">
           <label for="titlr">Evento:</label> 
           <input type="text" class="form-control" id="title" name="title" placeholder="Nome do Evento ">
        </div>
        <div class="form-group">
           <label for="titlr">Cidade:</label> 
           <input type="text" class="form-control" id="city" name="city" placeholder="Local do Evento ">
        </div>
        <div class="form-group">
           <label for="titlr">O evento é privado?:</label> 
           <select name="private" id="private" class="form-control">
                <option value="0">Não</option>
                <option value="1">Sim</option>
           </select>
        </div>
        <div class="form-group">
           <label for="titlr">Descrição:</label> 
           <textarea name="description" id="description" class="form-control" placeholder="O que vai acontecer no evento?"></textarea>
        </div>
        <input type="submit" class="btn btn-primary" value="Criar Evento">
    </form>
</div>

@endsection

	Depois criar rota de post no formulário, exemplo arquivo web.php
	

	Flash Messages

	Podemos adicionar mensagens ao usuario por session
	Estas mensagens são conhecidas por flash messages
	Podemos adicionar com método with nos controllers
	Utilizdas para apresentar um feedback ao usuario
	No blade podemos verificar a presença da mensagem pela diretiva @session;

	Para executar mensagens de sucesso ou error deve-se adicionar no layout principal com ->with e depois deve-se
	verificar se existe mensagem na classe principal do HTML

	Fazendo Upload de Imgens com Laravel
	
	tem que mudar enctype do from e criar um input de envio das mesmas;
	Fazer um tratamento de verificação no controller;
	Depois salvar a imagem com nome unico;
	No banco salvamos apenas o path para a imagem.

/////////////////////////////////////////////////////////////

	Para criar novo campo na tabela sem apagar todos os registros salvos:
	comando: php artisan make:migration add_image_to_events_table
	Ajustar codigo da migration
	Em seginda ajustar a função up: $table->string('image');
	E ajustar a função down: $table->dropColumn('image');
	Para adicionar campo image na tabela do banco de dados
	Depois executar: php artisan migrate

	Resgatando Registro do banco de dados

	Construção da View do evento;
	Resgatar apenas um registro;
	Utilização do método findOrFail;
	Criação de nova view e rota para esta função;
	Esta tela tem a funçaõ de exibir todas a informações do evento e tambem botão de participar.


	Manipulando Arquivos JSon
	
	Podemos salvar um conjunto de dados no banco para itens de múltipla escolha;
	Criação de campo determinado de json via migration;
	Utilização de input com checkbox;
	Apos envio para controller receber request.

	1 - php artisan make:migration add_items_to_events_table
	2 - Editar métodos up e dow da migration
	3 - php artisan migrate

	Salvando Datas no Banco de Dados com Laravel

	Precisamos criar um input do tipo date na nossa view;
	Um campo de dateTime via migrations
	E processar o envio dos dados via contoller pelo request de POST.
	
	Busca no Laravel
	Utilizar o Eloquent;
	Utilizar where fazendo filtro e enviando para a view;
	Fzer a exibição da busca na pr´pria Hime mudando layout com diretivas de Blade.

	Autenticação no Laravel
	Utilizar o Jetstream;
	Instalar o pacote via composer;
	Depois instalar o Liveware;
	E por fim rodamos as migrations.

	1 - comando: composer require laravel/jetstream
	2 - php artisan jetstream:install liveware
	3 - npm install
	4 - npm run dev	
	3 - php artisan migrate:status
	4 - php artisan migrate
	5 - php artisan migrate:status

	@guest
	@endguest

	Nova senha gam
	migrate:status
	trans: migrate:statuss

	Login: isaque.ixs@gmail.com
	pass: 11551011


	Relacionamento entre Tabelas - Relations(one to many)

	Relaçao de um para muitos;
	Um usuário será dono de um evento;
	Alterar migrations.

	
	php artisan make:migration add_user_id_to_events_table
	Editar up
	$table->foreignId('user_id')->constrained();
	Editar down
	$table->foreignId('user_id')
            	->constrained()
            	->onDelete('cascade');

	Depois adicionar uma funcao para cada model relacionada
	Event.php
	// Para indicar que esse evento pertence a um usuário
   	 public function user() {
        	return $this->belongsTo('App\Models\User');
   	 }
	User.php
	//indica que um usuário tem muiros eventos
	public function events() {
        	return $this->hasMany('App\Models\Event');
    	}
	
	Ao pegar usuário saber quais eventos estão vinculados 
	E ao pegar um evento saber qual usuário esta vinculado a ele
	
	php artisan migrate:fresh

	Adicionar na controller:
	$user = auth()->user();
       	 $event->user_id = $user->id;

	Adicionar função na rota que só podera ser acessada se usuário estiver logado (->middleware('auth');)
	Exemplo rota de criação de eventos -> Criar evento
	Route::get('/events/create', [EventController::class, 'create'])->middleware('auth');

	Exibindo dados do usário na view
	
	Editar eventController
	 $eventOwner = User::where('id', $event->user_id)->firt()->toArray();
	e
	return view('events.show', ['event' => $event, 'eventOwner' =>$eventOwner]);
	

**************************************************************************************
	Criando um dashboard ADministrativa

	
	Ligação de usuário com evento;
	Informar todos os eventos que usuário possui;
	Futuramente adicionar funcionalidade de edição e de deleção;
	Lista de todos os eventos vinculados ao usuário.

*****************************************************************
	Deletando Eventos

	Deletar Eventos;
	Utilizaremos uma nova rota para isso;
	Utilização do verbo HTTP DELETE;
	Criação de lógica no nosso Controller para essa alteração persistir no banco de dados.

	1 - Criação de rota com verbo DELETE - arquivo web.php
	Route::delete('/events/{id}', [EventController::class, 'destroy']);
	2 - Criação de função para deletar arquivo - arquivo EventController.php
	 public function destroy($id){
       	 Event::findOrFail($id)->delete();
        	return redirect('/dashboard')->with('msg', 'Evento excluído com sucesso!');
   	 }
	3 - Ajuste na view para exibir dados no front end - arquivo dashboard.blade.php
	 <td>
                        <a href="#" class="btn btn-info edit-btn"><ion-icon name="create-outline"></ion-icon> Editar</a>
                        <form action="/events/{{ $event->id }}" method="POST">
                            @csrf
                            @method('DELETE')
                            <button type="submit" class="btn btn-danger delete-btn"><ion-icon name="trash-outline"></ion-icon> Deletar</button>
                        </form>
                    </td>

**************************************************************

	Editando eventos

	Criar nova view e rota;
	Utilização de verbo HTTP chamado PUT;
	Persistir alterações no BD  por meio de uma action no Controller;
	Utlização de 2 actions.

*************************************************************
	
	Relations (many to many)

	Nova relção;
	Lógica de participação de eventos;
	Criação de nova tabela que administra estas relações seguindo a conveção do Larvel.





















